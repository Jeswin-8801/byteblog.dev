services:
  postgres-db:
    image: 'postgres:17.2'
    container_name: postgres
    restart: unless-stopped
    env_file: .env
    expose:
      - $POSTGRES_DB_DOCKER_PORT
    environment:
      POSTGRES_USER: $USER
      POSTGRES_PASSWORD: $PASSWORD
    networks:
      - byteblog-network
  
  pg-admin:
    image: 'dpage/pgadmin4:9.0.0'
    container_name: pgadmin4
    restart: unless-stopped
    depends_on:
      - postgres-db
    env_file: .env
    expose:
      - '$PGADMIN_DOCKER_PORT'
    environment:
      - PGADMIN_LISTEN_PORT=$PGADMIN_DOCKER_PORT
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - SCRIPT_NAME=/pgadmin4
    networks:
      - byteblog-network
    entrypoint: |
      /bin/sh -c ' chmod 600 /tmp/pgpass; /entrypoint.sh'
    user: root
    configs:
      - source: servers.json
        target: /pgadmin4/servers.json
      - source: pgpass
        target: /tmp/pgpass
      - source: preferences.json
        target: /pgadmin4/preferences.json
  
  minio:
    image: 'minio/minio:RELEASE.2025-02-07T23-21-09Z'
    container_name: minio
    restart: unless-stopped
    depends_on:
      - postgres-db
    env_file: .env
    ports:
      - "$MINIO_SERVER_PORT:$MINIO_SERVER_PORT"
      - "$MINIO_CONSOLE_PORT:$MINIO_CONSOLE_PORT"
    environment:
      - MINIO_ROOT_USER=$USER
      - MINIO_ROOT_PASSWORD=$PASSWORD
      - MINIO_UPDATE=off
    volumes:
      - './backend/minio/data:/data'
    networks:
      - byteblog-network
    command: 'server /data --console-address ":${MINIO_CONSOLE_PORT}"'
  
  createBuckets:
    image: 'minio/minio:RELEASE.2025-02-07T23-21-09Z'
    container_name: createBuckets
    depends_on:
      - minio
    restart: 'no'
    networks:
      - byteblog-network
    env_file: .env
    entrypoint: |
      /bin/sh -c '
        isAlive() { curl -sf http://minio:${MINIO_SERVER_PORT}/minio/health/live; }                               # check if Minio is alive
        while ! isAlive; do echo '...waiting...' && sleep 1; done;                                                # wait until Minio is alive
        mc config host add myminio http://minio:${MINIO_SERVER_PORT} "${USER}" "${PASSWORD}";                     # add newly configured host
        mc mb myminio/${MINIO_BUCKET};                                                                            # create bucket
        mc anonymous set public myminio/${MINIO_BUCKET};                                                          # make the bucket public
        exit 0;
      '
  
  spring-boot:
    build: ./backend/byteBlog
    container_name: spring-boot
    depends_on:
      - postgres-db
      - createBuckets
    restart: on-failure
    env_file: .env
    expose:
      - $SPRING_DOCKER_PORT
    networks:
      - byteblog-network
    environment:
      SPRING_APPLICATION_JSON: '{
          "server.port": $SPRING_DOCKER_PORT,
          
          "minio.url": "http://minio:$MINIO_SERVER_PORT",
          "minio.credentials.username": "$USER",
          "minio.credentials.password": "$PASSWORD",
          "minio.bucket.name": "$MINIO_BUCKET",

          "spring.datasource.url" : "jdbc:postgresql://postgres:$POSTGRES_DB_DOCKER_PORT/byte-blog-db",
          "spring.datasource.username" : "$USER",
          "spring.datasource.password" : "$PASSWORD",

          "spring.mail.username" : "$MAIL_USERNAME",
          "spring.mail.password" : "$MAIL_PASSWORD",

          "spring.security.oauth2.client.registration.google.clientId": "$GOOGLE_OAUTH2_CLIENT_ID",
          "spring.security.oauth2.client.registration.google.clientSecret": "$GOOGLE_OAUTH2_CLIENT_SECRET",
          "spring.security.oauth2.client.registration.github.clientId": "$GITHUB_OAUTH2_CLIENT_ID",
          "spring.security.oauth2.client.registration.github.clientSecret": "$GITHUB_OAUTH2_CLIENT_SECRET"
        }'
    stdin_open: true
    tty: true
  
  run-populate-scripts:
    build: ./backend/populate
    container_name: populate
    depends_on:
      - spring-boot
    restart: 'no'
    volumes:
      - './backend/populate:/data/populate'
    networks:
      - byteblog-network
    env_file: .env
    entrypoint: |
      /bin/bash -c '
          isAlive() { curl --silent --request GET http://spring-boot:${SPRING_DOCKER_PORT}/actuator/health | grep UP; }
          while ! isAlive; do echo '...waiting...' && sleep 1; done;
          cd /data/populate
          ./uploadToMinio.sh
          ./populateBlogs.sh
          exit 0;
      '
  
  angular:
    build: ./client
    container_name: angular
    depends_on:
      - run-populate-scripts
    env_file: .env
    expose:
      - $ANGULAR_DOCKER_PORT
    networks:
      - byteblog-network
  
  nginx:
    build:
      context: ./nginx
    container_name: nginx
    depends_on:
      - angular
    env_file: .env
    ports:
      - '80:80'
    networks:
      - byteblog-network

configs:
  pgpass:
    content: 'postgres-db:$POSTGRES_DB_DOCKER_PORT:*:$USER:$PASSWORD'
  servers.json:
    content: |-
      {
        "Servers": {
          "1": {
            "Name": "Code Node Server",
            "Group": "Servers",
            "Port": ${POSTGRES_DB_DOCKER_PORT},
            "Username": "${USER}",
            "Host": "postgres-db",
            "MaintenanceDB": "postgres",
            "PassFile": "/tmp/pgpass"
          }
        }
      }
  preferences.json:
    content: |-
      {
        "preferences": {
          "misc:user_interface:theme": "system"
        }
      }

networks:
  byteblog-network:
    driver: bridge
